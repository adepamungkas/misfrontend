{"version":3,"sources":["reusable/DocsLink.js","views/users/UsersData.js","Constant.js","views/material/Service.js","views/material/Material/Material.js"],"names":["DocsLink","props","name","text","rest","href","className","rel","target","React","memo","usersData","id","registered","role","status","BASE_URL","moment","require","HEADERS","accept","Service","createMaterial","payload","url","CONST","bodyFormData","FormData","append","Date","format","Name","IsBroken","Size","Color","Type","Description","InputBy","Trademark","Vendor","console","log","axios","post","headers","then","data","catch","err","editMaterial","ID","put","result","response","error","getMaterials","get","getMaterialById","deleteMaterial","delete","Material","state","types","value","label","type","loading","isAutoCompleteLoading","color","description","vendor","size","isBroken","trademark","date","colorToEdit","descriptionToEdit","vendorToEdit","nameToEdit","sizeToEdit","isBrokenToEdit","trademarkToEdit","dateToEdit","isCreateLoading","success","danger","warning","tableData","validationEditForm","validationSearch","selectedMaterial","setData","setState","loadingData","service","search","reset","getBadge","showAddModal","resetCreateModal","validationCreateForm","showEditModal","showDeleteModal","checkErrorDataCreate","errors","handleCreateMaterial","isEmptyObject","postMaterial","inputBy","swal","icon","title","handleDeleteClick","item","handleEditClick","handleDelete","handleEdit","this","obj","JSON","stringify","xs","md","action","method","encType","row","htmlFor","placeholder","onChange","event","autoComplete","onClick","show","onClose","closeButton","style","rows","isClearable","options","lg","items","fields","striped","itemsPerPage","pagination","hover","sorter","tableFilter","scopedSlots","Component"],"mappings":"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","file":"static/js/23.113541b5.chunk.js","sourcesContent":["import React from 'react'\nimport { CLink } from '@coreui/react'\n\nconst DocsLink = props => {\n  const {\n    name,\n    text,\n    ...rest\n  } = props\n\n  const href = name ? `https://coreui.io/react/docs/components/${name}` : props.href\n\n  return (\n    <div className=\"card-header-actions\">\n      <CLink \n        {...rest}\n        href={href}\n        rel=\"noreferrer noopener\" \n        target=\"_blank\" \n        className=\"card-header-action\"  \n      >\n        <small className=\"text-muted\">{ text || 'docs' }</small>\n      </CLink>\n    </div>\n  )\n}\n\nexport default React.memo(DocsLink)","const usersData = [\n  {id: 0, name: 'John Doe', registered: '2018/01/01', role: 'Guest', status: 'Pending'},\n  {id: 1, name: 'Samppa Nori', registered: '2018/01/01', role: 'Member', status: 'Active'},\n  {id: 2, name: 'Estavan Lykos', registered: '2018/02/01', role: 'Staff', status: 'Banned'},\n  {id: 3, name: 'Chetan Mohamed', registered: '2018/02/01', role: 'Admin', status: 'Inactive'},\n  {id: 4, name: 'Derick Maximinus', registered: '2018/03/01', role: 'Member', status: 'Pending'},\n  {id: 5, name: 'Friderik Dávid', registered: '2018/01/21', role: 'Staff', status: 'Active'},\n  {id: 6, name: 'Yiorgos Avraamu', registered: '2018/01/01', role: 'Member', status: 'Active'},\n  {id: 7, name: 'Avram Tarasios', registered: '2018/02/01', role: 'Staff', status: 'Banned'},\n  {id: 8, name: 'Quintin Ed', registered: '2018/02/01', role: 'Admin', status: 'Inactive'},\n  {id: 9, name: 'Enéas Kwadwo', registered: '2018/03/01', role: 'Member', status: 'Pending'},\n  {id: 10, name: 'Agapetus Tadeáš', registered: '2018/01/21', role: 'Staff', status: 'Active'},\n  {id: 11, name: 'Carwyn Fachtna', registered: '2018/01/01', role: 'Member', status: 'Active'},\n  {id: 12, name: 'Nehemiah Tatius', registered: '2018/02/01', role: 'Staff', status: 'Banned'},\n  {id: 13, name: 'Ebbe Gemariah', registered: '2018/02/01', role: 'Admin', status: 'Inactive'},\n  {id: 14, name: 'Eustorgios Amulius', registered: '2018/03/01', role: 'Member', status: 'Pending'},\n  {id: 15, name: 'Leopold Gáspár', registered: '2018/01/21', role: 'Staff', status: 'Active'},\n  {id: 16, name: 'Pompeius René', registered: '2018/01/01', role: 'Member', status: 'Active'},\n  {id: 17, name: 'Paĉjo Jadon', registered: '2018/02/01', role: 'Staff', status: 'Banned'},\n  {id: 18, name: 'Micheal Mercurius', registered: '2018/02/01', role: 'Admin', status: 'Inactive'},\n  {id: 19, name: 'Ganesha Dubhghall', registered: '2018/03/01', role: 'Member', status: 'Pending'},\n  {id: 20, name: 'Hiroto Šimun', registered: '2018/01/21', role: 'Staff', status: 'Active'},\n  {id: 21, name: 'Vishnu Serghei', registered: '2018/01/01', role: 'Member', status: 'Active'},\n  {id: 22, name: 'Zbyněk Phoibos', registered: '2018/02/01', role: 'Staff', status: 'Banned'},\n  {id: 23, name: 'Aulus Agmundr', registered: '2018/01/01', role: 'Member', status: 'Pending'},\n  {id: 42, name: 'Ford Prefect', registered: '2001/05/25', role: 'Alien', status: 'Don\\'t panic!'}\n]\n\nexport default usersData\n","export const BASE_URL = \"http://143.198.204.31:8080/api/v1/\";\r\n\r\n\r\n","import axios from 'axios';\r\nimport swal from 'sweetalert';\r\nimport * as CONST from '../../Constant';\r\n\r\nconst moment = require('moment');\r\nconst HEADERS = {\r\n   // 'Content-Type': 'application/json',\r\n    accept: 'application/json',\r\n    'content-type': 'multipart/form-data'\r\n   // Authorization: `Bearer ` + localStorage.getItem('token'), 'x-timezone-offset': moment().utcOffset() / 60\r\n};\r\n\r\nclass Service {\r\n\r\n    createMaterial = (payload) => {\r\n        const url = `${CONST.BASE_URL}materials`;\r\n        var bodyFormData = new FormData();\r\n        bodyFormData.append('Date', moment(payload.Date).format());\r\n        bodyFormData.append('Name', payload.Name);\r\n        bodyFormData.append('IsBroken', payload.IsBroken);\r\n        bodyFormData.append('Size', payload.Size);\r\n        bodyFormData.append('Color', payload.Color);\r\n        bodyFormData.append('Type', payload.Type);\r\n        bodyFormData.append('Description', payload.Description);\r\n        bodyFormData.append('InputBy', payload.InputBy);\r\n        bodyFormData.append('Trademark', payload.Trademark);\r\n        bodyFormData.append('Vendor', payload.Vendor);\r\nconsole.log(\"\",moment(payload.Date).format())\r\n        return axios.post(url, bodyFormData, { headers: HEADERS })\r\n            .then(data => {\r\n\r\n                return data;\r\n            })\r\n            .catch((err) => {\r\n                throw err;\r\n            });\r\n    }\r\n\r\n    editMaterial = (ID, payload) => {\r\n        var bodyFormData = new FormData();\r\n        bodyFormData.append('Date', moment(payload.Date).format());\r\n        bodyFormData.append('Name', payload.Name);\r\n        bodyFormData.append('IsBroken', payload.IsBroken);\r\n        bodyFormData.append('Size', payload.Size);\r\n        bodyFormData.append('Color', payload.Color);\r\n        bodyFormData.append('Type', payload.Type);\r\n        bodyFormData.append('Description', payload.Description);\r\n        bodyFormData.append('InputBy', payload.InputBy);\r\n        bodyFormData.append('Trademark', payload.Trademark);\r\n        bodyFormData.append('Vendor', payload.Vendor);\r\n       \r\n        let url = `${CONST.BASE_URL}materials/${ID}`;\r\n        return axios.put(url, bodyFormData, { headers: HEADERS })\r\n            .then((result) => {\r\n                return result.data;\r\n            })\r\n            .catch((err) => {\r\n                // console.log(err.response.data.error);\r\n                const error = err.response?.data.error\r\n\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    getMaterials = (id) => {\r\n        let url = `${CONST.BASE_URL}materials/`;\r\n        return axios.get(url, { headers: HEADERS })\r\n            .then((result) => {\r\n                \r\n                return result.data;\r\n            })\r\n            .catch((err) => {\r\n                const error = err.response?.data?.error\r\n\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    getMaterialById = (id) => {\r\n        let url = `${CONST.BASE_URL}materials/${id}`;\r\n        return axios.get(url, { headers: HEADERS })\r\n            .then((result) => {\r\n                return result.data;\r\n            })\r\n            .catch((err) => {\r\n                const error = err.response?.data.error\r\n\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    deleteMaterial = (ID) => {\r\n        console.log(\"ID\",ID)\r\n        let url = `${CONST.BASE_URL}materials/${ID}`;\r\n        return axios.delete(url, { headers: HEADERS })\r\n            .then((result) => {\r\n                return result.data;\r\n            })\r\n            .catch((err) => {\r\n                // console.log(err.response.data.error);\r\n                const error = err.response?.data.error\r\n\r\n                throw error;\r\n            });\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Service;\r\n","import React, { Component } from 'react'\r\nimport {\r\n    CButton,\r\n    CBadge,\r\n    CCard,\r\n    CCardBody,\r\n    CCardFooter,\r\n    CCardHeader,\r\n    CCol,\r\n    CCollapse,\r\n    CDropdownItem,\r\n    CDropdownMenu,\r\n    CDropdownToggle,\r\n    CFade,\r\n    CForm,\r\n    CFormGroup,\r\n    CFormText,\r\n    CValidFeedback,\r\n    CInvalidFeedback,\r\n    CTextarea,\r\n    CInput,\r\n    CInputFile,\r\n    CInputCheckbox,\r\n    CInputRadio,\r\n    CInputGroup,\r\n    CInputGroupAppend,\r\n    CInputGroupPrepend,\r\n    CDropdown,\r\n    CInputGroupText,\r\n    CLabel,\r\n    CSelect,\r\n    CRow,\r\n    CDataTable,\r\n    CSwitch,\r\n    CModal,\r\n    CModalBody,\r\n    CModalFooter,\r\n    CModalHeader,\r\n    CModalTitle,\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\nimport { DocsLink } from 'src/reusable'\r\nimport Service from '../Service';\r\nimport swal from 'sweetalert';\r\nimport usersData from '../../users/UsersData'\r\nimport Select from 'react-select';\r\n\r\nconst moment = require('moment');\r\nclass Material extends Component {\r\n\r\n    state = {\r\n        types: [\r\n            { value: \"finish\", label: \"finish\" },\r\n            { value: \"semi-finish\", label: \"semi-finish\" },\r\n            { value: \"raw\", label: \"raw\" },\r\n        ],\r\n        type: \"\",\r\n        loading: false,\r\n        isAutoCompleteLoading: false,\r\n        color: \"\",\r\n        description: \"\",\r\n        vendor: \"\",\r\n        name: \"\",\r\n        size: 0,\r\n        isBroken: false,\r\n        trademark: \"\",\r\n        date: new Date(),\r\n\r\n        colorToEdit: \"\",\r\n        descriptionToEdit: \"\",\r\n        vendorToEdit: \"\",\r\n        nameToEdit: \"\",\r\n        sizeToEdit: 0,\r\n        isBrokenToEdit: false,\r\n        trademarkToEdit: \"\",\r\n        dateToEdit: new Date(),\r\n\r\n        isCreateLoading: false,\r\n        success: false,\r\n        danger: false,\r\n        warning: false,\r\n        tableData: [],\r\n        validationEditForm: {},\r\n        validationSearch: {},\r\n        selectedMaterial: {}\r\n\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.service = new Service();\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        //  this.setUnits();\r\n        this.setData();\r\n        console.log(this.state.tableData)\r\n        console.log(usersData)\r\n\r\n    }\r\n\r\n    setData = () => {\r\n\r\n        this.setState({ loadingData: true })\r\n        this.service\r\n            .getMaterials()\r\n            .then((result) => {\r\n                console.log(result.data);\r\n                this.setState({ tableData: result.data, loadingData: false })\r\n            });\r\n    }\r\n\r\n    search = () => {\r\n        this.setData();\r\n    }\r\n\r\n\r\n    reset = () => {\r\n        this.setState({ name: \"\", vendor: \"\" })\r\n    }\r\n    getBadge = status => {\r\n        switch (status) {\r\n            case 'finish': return 'success'\r\n            case 'semi-finish': return 'secondary'\r\n            case 'raw': return 'warning'\r\n            case 'Banned': return 'danger'\r\n            default: return 'primary'\r\n        }\r\n    }\r\n\r\n    showAddModal = (value) => {\r\n\r\n        this.setState({ success: value });\r\n        this.resetCreateModal()\r\n    }\r\n\r\n    resetCreateModal = () => {\r\n        this.setState({ validationCreateForm: {} })\r\n    }\r\n    showEditModal = (value) => {\r\n\r\n        this.setState({ warning: value });\r\n    }\r\n\r\n    showDeleteModal = (value) => {\r\n\r\n        this.setState({ danger: value });\r\n    }\r\n\r\n    checkErrorDataCreate = () => {\r\n        let errors = {}\r\n\r\n        if (this.state.size == 0) {\r\n            errors.size = \"size is Required\"\r\n        }\r\n\r\n        if (this.state.vendor == null || this.state.vendor == \"\") {\r\n            errors.vendor = \"vendor is Required\"\r\n        }\r\n\r\n        if (this.state.color == null || this.state.color == \"\") {\r\n            errors.vendor = \"vendor is Required\"\r\n        }\r\n\r\n        if (this.state.name == null || this.state.name === \"\") {\r\n            errors.name = \"name is Required\"\r\n        }\r\n\r\n        return errors\r\n    }\r\n\r\n    isEmptyObject(obj) {\r\n        return JSON.stringify(obj) === '{}';\r\n    }\r\n\r\n    handleCreateMaterial = () => {\r\n        this.setState({ validationCreateForm: {} })\r\n        let errors = this.checkErrorDataCreate()\r\n        this.setState({ validationCreateForm: errors })\r\n\r\n        if (this.isEmptyObject(errors)) {\r\n            this.postMaterial()\r\n        }\r\n\r\n    }\r\n\r\n    postMaterial = () => {\r\n\r\n        this.setState({ validationCreateForm: {} })\r\n\r\n        const payload = {\r\n            Name: this.state.name,\r\n            InputBy: this.state.inputBy,\r\n            IsBroken: false,\r\n            Date: moment(this.state.date).format(\"YYYY-MM-DD hh:ss\"),\r\n            // Date: this.state.date && this.state.date != \"Invalid date\" ? moment(this.state.date).format(\"YYYY-MM-DD\") : null,\r\n            Description: this.state.description,\r\n            Trademark: this.state.trademark,\r\n            Vendor: this.state.vendor,\r\n            Color: this.state.color,\r\n            Size: this.state.size,\r\n            Type: this.state.type.value,\r\n            IsBroken: this.state.isBroken,\r\n            validationCreateForm: {}\r\n        }\r\n\r\n\r\n        this.service.createMaterial(payload)\r\n            .then((result) => {\r\n                swal({\r\n                    icon: 'success',\r\n                    title: 'Good...',\r\n                    text: 'Data berhasil disimpan!'\r\n                })\r\n\r\n                this.setState({ isCreateLoading: false }, () => {\r\n\r\n                    // this.resetPagingConfiguration();\r\n                    this.setData();\r\n                    this.showAddModal(false);\r\n                });\r\n            })\r\n            .catch((error) => {\r\n                if (error) {\r\n                    let message = \"\"\r\n                    this.setState({ isCreateLoading: false, validationCreateForm: error });\r\n                    swal({\r\n                        icon: 'error',\r\n                        title: 'Oops...',\r\n                        text: message\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n\r\n\r\n    handleDeleteClick = (item) => {\r\n        console.log(\"item\", item)\r\n        this.setState({ selectedMaterial: item }, () => {\r\n            this.showDeleteModal(true);\r\n        })\r\n    }\r\n\r\n    handleEditClick = (item) => {\r\n        console.log(\"item\", item)\r\n        this.setState({\r\n            selectedMaterial: item,\r\n            nameToEdit: item.Name,\r\n            descriptionToEdit:item.Description,\r\n            dateToEdit: item.Date,\r\n            colorToEdit: item.Color,\r\n            vendorToEdit: item.Vendor,\r\n            sizeToEdit: item.Size,\r\n            trademarkToEdit: item.Trademark,\r\n            isBrokenToEdit: item.IsBroken\r\n        }, () => {\r\n            this.showEditModal(true);\r\n        })\r\n    }\r\n\r\n    handleDelete = () => {\r\n        // this.setState({ isDeleteOvertimeLoading: true })\r\n\r\n        this.service.deleteMaterial(this.state.selectedMaterial?.ID)\r\n            .then(() => {\r\n\r\n                swal({\r\n                    icon: 'success',\r\n                    title: 'Good...',\r\n                    text: 'Data berhasil dihapus!'\r\n                })\r\n                this.setState({ selectedMaterial: null }, () => {\r\n\r\n                    // this.resetPagingConfiguration();\r\n                    this.setData();\r\n                    this.showDeleteModal(false);\r\n                });\r\n            })\r\n    }\r\n\r\n    handleEdit = () => {\r\n\r\n        const payload = {\r\n            Name: this.state.name,\r\n            InputBy: this.state.inputBy,\r\n            IsBroken: false,\r\n            Date: this.state.dateToEdit,\r\n            Description: this.state.descriptionToEdit,\r\n            Trademark: this.state.trademarkToEdit,\r\n            Vendor: this.state.vendorToEdit,\r\n            Color: this.state.colorToEdit,\r\n            Size: this.state.sizeToEdit,\r\n            Type: this.state.type.value,\r\n            IsBroken: this.state.isBrokenToEdit,\r\n        }\r\n\r\n        // this.setState({ isDeleteOvertimeLoading: true })\r\n        this.service.editMaterial(this.state.selectedMaterial?.ID, payload)\r\n            .then(() => {\r\n\r\n                swal({\r\n                    icon: 'success',\r\n                    title: 'Good...',\r\n                    text: 'Data berhasil dihapus!'\r\n                })\r\n                this.setState({ selectedMaterial: null }, () => {\r\n\r\n                    this.setData();\r\n                    this.showEditModal(false);\r\n                });\r\n            })\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const { tableData } = this.state;\r\n\r\n        const fields = ['ID', 'Date', 'Description', 'Name', 'Color', 'Size', 'Trademark', 'Vendor', 'Type', 'Edit', 'Delete']\r\n\r\n        return (\r\n\r\n            <>\r\n                <CRow>\r\n                    <CCol xs=\"12\" md=\"6\">\r\n                        <CCard>\r\n                            <CCardHeader>\r\n                                Filter Data\r\n              <small> Material</small>\r\n                            </CCardHeader>\r\n                            <CCardBody>\r\n                                <CForm action=\"\" method=\"post\" encType=\"multipart/form-data\" className=\"form-horizontal\">\r\n\r\n                                    <CFormGroup row>\r\n                                        <CCol md=\"3\">\r\n                                            <CLabel htmlFor=\"text-input\">Name Material</CLabel>\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\" md=\"9\">\r\n                                            <CInput\r\n                                                id=\"text-input\"\r\n                                                name=\"name\"\r\n                                                value={this.state.name}\r\n                                                placeholder=\"Name Material\"\r\n                                                onChange={(event) => {\r\n                                                    console.log(event.target.value)\r\n                                                    this.setState({ name: event.target.value })\r\n                                                }\r\n\r\n                                                }\r\n                                            />\r\n\r\n                                            {/* <CFormText>Plaese type name material</CFormText> */}\r\n                                        </CCol>\r\n                                    </CFormGroup>\r\n                                    <CFormGroup row>\r\n                                        <CCol md=\"3\">\r\n                                            <CLabel htmlFor=\"email-input\">Vendor Name</CLabel>\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\" md=\"9\">\r\n                                            <CInput type=\"text\" value={this.state.vendor} id=\"vendor-input\"\r\n                                                onChange={(event) => {\r\n                                                    this.setState({ vendor: event.target.value })\r\n                                                }}\r\n                                                name=\"vendor\" placeholder=\"Enter Vendor Name\" autoComplete=\"email\" />\r\n                                            {/* <CFormText className=\"help-block\">Please enter vendor name</CFormText> */}\r\n                                        </CCol>\r\n                                    </CFormGroup>\r\n\r\n                                    <CFormGroup row>\r\n                                        <CCol md=\"3\">\r\n                                            <CLabel htmlFor=\"date-input\">Date Input</CLabel>\r\n                                        </CCol>\r\n                                        <CCol xs=\"5\" md=\"4\">\r\n                                            <CInput type=\"date\" id=\"date-input\" name=\"date-input\" placeholder=\"date\" />\r\n                                        </CCol>\r\n                                        <CCol xs=\"2\" md=\"1\">\r\n                                            <CLabel htmlFor=\"date-input\"> - </CLabel>\r\n                                        </CCol>\r\n                                        <CCol xs=\"5\" md=\"4\">\r\n                                            <CInput type=\"date\" id=\"date-input\" name=\"date-input\" placeholder=\"date\" />\r\n                                        </CCol>\r\n\r\n                                    </CFormGroup>\r\n\r\n\r\n\r\n\r\n\r\n                                </CForm>\r\n                            </CCardBody>\r\n                            <CCardFooter>\r\n\r\n                                <CButton type=\"reset\" size=\"sm\" color=\"warning\" onClick={() => this.reset()} ><CIcon /> Reset</CButton>\r\n                                <CButton type=\"submit\" size=\"sm\" color=\"primary\" onClick={() => this.search()}><CIcon name=\"cil-search\" /> Cari</CButton>\r\n                                <CButton type=\"submit\" size=\"sm\" color=\"success\" onClick={() => this.showAddModal(true)}><CIcon name=\"cil-plus\" /> Tambah Data</CButton>\r\n\r\n                            </CCardFooter>\r\n                        </CCard>\r\n\r\n                    </CCol>\r\n                </CRow>\r\n                <CModal\r\n                    show={this.state.success}\r\n                    onClose={() => this.showAddModal(false)}\r\n                    color=\"success\"\r\n                    size={\"lg\"}\r\n                >\r\n                    <CModalHeader closeButton>\r\n                        <CModalTitle>Input New Material</CModalTitle>\r\n                    </CModalHeader>\r\n                    <CModalBody>\r\n\r\n                        <CRow>\r\n                            <CCol>\r\n                                <CCard>\r\n                                    <CCardHeader>\r\n                                        Form Input\r\n              <small>  Material</small>\r\n                                    </CCardHeader>\r\n                                    <CCardBody>\r\n                                        <CForm action=\"\" method=\"post\" encType=\"multipart/form-data\" className=\"form-horizontal\">\r\n\r\n                                            <CFormGroup row>\r\n                                                <CCol md=\"3\">\r\n                                                    <CLabel htmlFor=\"email-input\">Name Material</CLabel>\r\n                                                </CCol>\r\n                                                <CCol xs=\"12\" md=\"9\">\r\n                                                    <CInput\r\n                                                        type=\"text\"\r\n                                                        id=\"name\"\r\n\r\n                                                        //  invalid={this.state.validationCreateForm?.name ==\"\" ? true:false}\r\n                                                        name=\"name\"\r\n                                                        placeholder=\"Enter Name Material\"\r\n                                                        // autoComplete=\"on\"\r\n                                                        value={this.state.name}\r\n                                                        onChange={(event) => {\r\n                                                            console.log(event.target.value)\r\n                                                            this.setState({ name: event.target.value })\r\n                                                        }\r\n                                                        }\r\n                                                    />\r\n\r\n                                                    <span style={{ color: \"red\" }}>{this.state.validationCreateForm?.name} </span>\r\n\r\n                                                </CCol>\r\n                                            </CFormGroup>\r\n                                            <CFormGroup row>\r\n                                                <CCol md=\"3\">\r\n                                                    <CLabel htmlFor=\"password-input\">Colors</CLabel>\r\n                                                </CCol>\r\n                                                <CCol xs=\"12\" md=\"9\">\r\n                                                    <CInput\r\n                                                        type=\"text\"\r\n                                                        id=\"color\"\r\n                                                        name=\"color-input\"\r\n                                                        placeholder=\"Enter color material \"\r\n                                                        autoComplete=\"color-input\"\r\n                                                        onChange={(event) => {\r\n\r\n                                                            this.setState({ color: event.target.value })\r\n                                                        }\r\n                                                        }\r\n                                                    />\r\n                                                    <span style={{ color: \"red\" }}>{this.state.validationCreateForm?.color} </span>\r\n\r\n                                                </CCol>\r\n                                            </CFormGroup>\r\n                                            <CFormGroup row>\r\n                                                <CCol md=\"3\">\r\n                                                    <CLabel htmlFor=\"password-input\">Size</CLabel>\r\n                                                </CCol>\r\n                                                <CCol xs=\"12\" md=\"9\">\r\n                                                    <CInput\r\n                                                        type=\"number\"\r\n                                                        id=\"size\"\r\n                                                        name=\"size\"\r\n                                                        placeholder=\"Enter size material \"\r\n                                                        autoComplete=\"color-input\"\r\n                                                        onChange={(event) => {\r\n\r\n                                                            this.setState({ size: event.target.value })\r\n                                                        }\r\n                                                        }\r\n                                                    />\r\n                                                    <span style={{ color: \"red\" }}>{this.state.validationCreateForm?.size} </span>\r\n\r\n                                                </CCol>\r\n                                            </CFormGroup>\r\n\r\n                                            <CFormGroup row>\r\n                                                <CCol md=\"3\">\r\n                                                    <CLabel htmlFor=\"password-input\">Vendor</CLabel>\r\n                                                </CCol>\r\n                                                <CCol xs=\"12\" md=\"9\">\r\n                                                    <CInput\r\n                                                        type=\"text\"\r\n                                                        id=\"vendor\"\r\n                                                        name=\"vendor\"\r\n                                                        placeholder=\"Enter vendor material \"\r\n                                                        autoComplete=\"vendor\"\r\n                                                        onChange={(event) => {\r\n\r\n                                                            this.setState({ vendor: event.target.value })\r\n                                                        }\r\n                                                        }\r\n                                                    />\r\n                                                    <span style={{ color: \"red\" }}>{this.state.validationCreateForm?.vendor} </span>\r\n\r\n                                                </CCol>\r\n                                            </CFormGroup>\r\n                                            <CFormGroup row>\r\n                                                <CCol md=\"3\">\r\n                                                    <CLabel htmlFor=\"password-input\">Trademark</CLabel>\r\n                                                </CCol>\r\n                                                <CCol xs=\"12\" md=\"9\">\r\n                                                    <CInput\r\n                                                        type=\"text\"\r\n                                                        id=\"Trademark\"\r\n                                                        name=\"Trademark\"\r\n                                                        placeholder=\"Enter Trademark material \"\r\n                                                        autoComplete=\"Trademark\"\r\n                                                        onChange={(event) => {\r\n\r\n                                                            this.setState({ trademark: event.target.value })\r\n                                                        }\r\n                                                        }\r\n                                                    />\r\n                                                    <span style={{ color: \"red\" }}>{this.state.validationCreateForm?.trademark} </span>\r\n\r\n                                                </CCol>\r\n                                            </CFormGroup>\r\n                                            <CFormGroup row>\r\n                                                <CCol md=\"3\">\r\n                                                    <CLabel htmlFor=\"date-input\">Date Input</CLabel>\r\n                                                </CCol>\r\n                                                <CCol xs=\"12\" md=\"9\">\r\n                                                    <CInput\r\n                                                        type=\"date\"\r\n                                                        id=\"date-input\"\r\n                                                        name=\"date\"\r\n                                                        placeholder=\"date\"\r\n                                                        value={moment(this.state.date).format(\"YYYY-MM-DD\")}\r\n                                                        onChange={(event) => {\r\n                                                            this.setState({ date: event.target.value })\r\n                                                        }}\r\n\r\n                                                    />\r\n                                                </CCol>\r\n                                            </CFormGroup>\r\n\r\n                                            <CFormGroup row>\r\n                                                <CCol md=\"3\">\r\n                                                    <CLabel htmlFor=\"textarea-input\">Description</CLabel>\r\n                                                </CCol>\r\n                                                <CCol xs=\"12\" md=\"9\">\r\n                                                    <CTextarea\r\n                                                        name=\"textarea-input\"\r\n                                                        id=\"textarea-input\"\r\n                                                        rows=\"9\"\r\n                                                        placeholder=\"Content...\"\r\n                                                        onChange={(event) => {\r\n                                                            this.setState({ description: event.target.value })\r\n                                                        }\r\n                                                        }\r\n                                                    />\r\n                                                </CCol>\r\n                                            </CFormGroup>\r\n                                            <CFormGroup row>\r\n                                                <CCol md=\"3\">\r\n                                                    <CLabel htmlFor=\"select\">Select type material</CLabel>\r\n                                                </CCol>\r\n                                                <CCol xs=\"12\" md=\"9\">\r\n\r\n                                                    <Select\r\n                                                        placeholder={'select type material'}\r\n                                                        isClearable={true}\r\n                                                        options={this.state.types}\r\n                                                        value={this.state.type}\r\n                                                        onChange={(event) => {\r\n                                                            this.setState({ type: event });\r\n                                                        }} />\r\n\r\n                                                    <span style={{ color: \"red\" }}>{this.state.validationCreateForm?.type} </span>\r\n                                                </CCol>\r\n                                            </CFormGroup>\r\n\r\n\r\n\r\n                                        </CForm>\r\n                                    </CCardBody>\r\n                                    <CCardFooter>\r\n\r\n\r\n                                    </CCardFooter>\r\n                                </CCard>\r\n\r\n                            </CCol>\r\n                        </CRow>\r\n\r\n                    </CModalBody>\r\n                    <CModalFooter>\r\n                        <CButton color=\"success\" onClick={this.handleCreateMaterial} >Submit</CButton>{' '}\r\n                        <CButton color=\"secondary\" onClick={() => this.showAddModal(false)}>Cancel</CButton>\r\n                    </CModalFooter>\r\n                </CModal>\r\n\r\n                <CModal\r\n                    size={\"lg\"}\r\n                    show={this.state.warning}\r\n                    onClose={() => this.showEditModal(false)}\r\n                    color=\"warning\"\r\n                >\r\n                    <CModalHeader closeButton>\r\n                        <CModalTitle>Edit Material</CModalTitle>\r\n                    </CModalHeader>\r\n                    <CModalBody>\r\n\r\n                        <CRow>\r\n                            <CCol>\r\n                                <CCard>\r\n                                    <CCardHeader>\r\n                                        Form Edit\r\n              <small>  Material</small>\r\n                                    </CCardHeader>\r\n                                    <CCardBody>\r\n                                        <CForm action=\"\" method=\"post\" encType=\"multipart/form-data\" className=\"form-horizontal\">\r\n\r\n                                            <CFormGroup row>\r\n                                                <CCol md=\"3\">\r\n                                                    <CLabel htmlFor=\"email-input\">Name Material</CLabel>\r\n                                                </CCol>\r\n                                                <CCol xs=\"12\" md=\"9\">\r\n                                                    <CInput\r\n                                                        type=\"text\"\r\n                                                        id=\"name-input\"\r\n                                                        name=\"name\"\r\n                                                        placeholder=\"Enter Name Material\"\r\n                                                        // autoComplete=\"on\"\r\n                                                        value={this.state.nameToEdit}\r\n                                                        onChange={(event) => {\r\n                                                            console.log(event.target.value)\r\n                                                            this.setState({ nameToEdit: event.target.value })\r\n                                                        }\r\n                                                        }\r\n                                                    />\r\n                                                    {/* <CFormText className=\"help-block\">*Required</CFormText> */}\r\n                                                </CCol>\r\n                                            </CFormGroup>\r\n                                            <CFormGroup row>\r\n                                                <CCol md=\"3\">\r\n                                                    <CLabel htmlFor=\"password-input\">Colors</CLabel>\r\n                                                </CCol>\r\n                                                <CCol xs=\"12\" md=\"9\">\r\n                                                    <CInput\r\n                                                        type=\"text\"\r\n                                                        id=\"color\"\r\n                                                        name=\"color-input\"\r\n                                                        placeholder=\"Enter color material \"\r\n                                                        autoComplete=\"color-input\"\r\n                                                        value={this.state.colorToEdit}\r\n                                                        onChange={(event) => {\r\n\r\n                                                            this.setState({ colorToEdit: event.target.value })\r\n                                                        }\r\n                                                        }\r\n                                                    />\r\n                                                    {/* <CFormText className=\"help-block\">*Required</CFormText> */}\r\n                                                </CCol>\r\n                                            </CFormGroup>\r\n                                            <CFormGroup row>\r\n                                                <CCol md=\"3\">\r\n                                                    <CLabel htmlFor=\"password-input\">Size</CLabel>\r\n                                                </CCol>\r\n                                                <CCol xs=\"12\" md=\"9\">\r\n                                                    <CInput\r\n                                                        type=\"number\"\r\n                                                        id=\"size\"\r\n                                                        name=\"size\"\r\n                                                        placeholder=\"Enter size material \"\r\n                                                        autoComplete=\"color-input\"\r\n                                                        value={this.state.sizeToEdit}\r\n                                                        onChange={(event) => {\r\n\r\n                                                            this.setState({ sizeToEdit: event.target.value })\r\n                                                        }\r\n                                                        }\r\n                                                    />\r\n                                                    {/* <CFormText className=\"help-block\">*Required</CFormText> */}\r\n                                                </CCol>\r\n                                            </CFormGroup>\r\n\r\n                                            <CFormGroup row>\r\n                                                <CCol md=\"3\">\r\n                                                    <CLabel htmlFor=\"password-input\">Vendor</CLabel>\r\n                                                </CCol>\r\n                                                <CCol xs=\"12\" md=\"9\">\r\n                                                    <CInput\r\n                                                        type=\"text\"\r\n                                                        id=\"vendor\"\r\n                                                        name=\"vendor\"\r\n                                                        placeholder=\"Enter vendor material \"\r\n                                                        autoComplete=\"vendor\"\r\n                                                        value={this.state.vendorToEdit}\r\n                                                        onChange={(event) => {\r\n\r\n                                                            this.setState({ vendorToEdit: event.target.value })\r\n                                                        }\r\n                                                        }\r\n                                                    />\r\n                                                    {/* <CFormText className=\"help-block\">*Required</CFormText> */}\r\n                                                </CCol>\r\n                                            </CFormGroup>\r\n                                            <CFormGroup row>\r\n                                                <CCol md=\"3\">\r\n                                                    <CLabel htmlFor=\"password-input\">Trademark</CLabel>\r\n                                                </CCol>\r\n                                                <CCol xs=\"12\" md=\"9\">\r\n                                                    <CInput\r\n                                                        type=\"text\"\r\n                                                        id=\"Trademark\"\r\n                                                        name=\"Trademark\"\r\n                                                        placeholder=\"Enter Trademark material \"\r\n                                                        autoComplete=\"Trademark\"\r\n                                                        value={this.state.trademarkToEdit}\r\n                                                        onChange={(event) => {\r\n\r\n                                                            this.setState({ trademarkToEdit: event.target.value })\r\n                                                        }\r\n                                                        }\r\n                                                    />\r\n                                                    {/* <CFormText className=\"help-block\">*Required</CFormText> */}\r\n                                                </CCol>\r\n                                            </CFormGroup>\r\n                                            <CFormGroup row>\r\n                                                <CCol md=\"3\">\r\n                                                    <CLabel htmlFor=\"date-input\">Date Input</CLabel>\r\n                                                </CCol>\r\n                                                <CCol xs=\"12\" md=\"9\">\r\n                                                    <CInput\r\n                                                        type=\"date\"\r\n                                                        id=\"date-input\"\r\n                                                        name=\"date\"\r\n                                                        placeholder=\"date\"\r\n                                                        value={moment(this.state.dateToEdit).format(\"YYYY-MM-DD\")}\r\n                                                        onChange={(event) => {\r\n                                                            this.setState({ dateToEdit: event.target.value })\r\n                                                        }}\r\n\r\n                                                    />\r\n                                                </CCol>\r\n                                            </CFormGroup>\r\n\r\n                                            <CFormGroup row>\r\n                                                <CCol md=\"3\">\r\n                                                    <CLabel htmlFor=\"textarea-input\">Description</CLabel>\r\n                                                </CCol>\r\n                                                <CCol xs=\"12\" md=\"9\">\r\n                                                    <CTextarea\r\n                                                        name=\"textarea-input\"\r\n                                                        id=\"textarea-input\"\r\n                                                        rows=\"9\"\r\n                                                        value={this.state.descriptionToEdit}\r\n                                                        placeholder=\"Content...\"\r\n                                                        onChange={(event) => {\r\n                                                            this.setState({ descriptionToEdit: event.target.value })\r\n                                                        }\r\n                                                        }\r\n                                                    />\r\n                                                </CCol>\r\n                                            </CFormGroup>\r\n                                            <CFormGroup row>\r\n                                                <CCol md=\"3\">\r\n                                                    <CLabel htmlFor=\"select\">Select type material</CLabel>\r\n                                                </CCol>\r\n                                                <CCol xs=\"12\" md=\"9\">\r\n\r\n                                                    <Select\r\n                                                        placeholder={'pilih unit'}\r\n                                                        isClearable={true}\r\n                                                        options={this.state.types}\r\n                                                        value={this.state.type}\r\n                                                        onChange={(event) => {\r\n                                                            this.setState({ type: event.value });\r\n                                                        }} />\r\n\r\n\r\n                                                </CCol>\r\n                                            </CFormGroup>\r\n\r\n\r\n\r\n                                        </CForm>\r\n                                    </CCardBody>\r\n                                    <CCardFooter>\r\n\r\n\r\n                                    </CCardFooter>\r\n                                </CCard>\r\n\r\n                            </CCol>\r\n                        </CRow>\r\n\r\n                    </CModalBody>\r\n                    <CModalFooter>\r\n                        <CButton color=\"warning\" onClick={() => this.handleEdit()}>Submit</CButton>{' '}\r\n                        <CButton color=\"secondary\" onClick={() => this.showEditModal(false)}>Cancel</CButton>\r\n                    </CModalFooter>\r\n                </CModal>\r\n\r\n\r\n                <CModal\r\n                    show={this.state.danger}\r\n                    onClose={() => this.showDeleteModal(false)}\r\n                    color=\"danger\"\r\n                >\r\n                    <CModalHeader closeButton>\r\n                        <CModalTitle>Delete Data</CModalTitle>\r\n                    </CModalHeader>\r\n                    <CModalBody>\r\n                        Are you sure to delete this data?\r\n              </CModalBody>\r\n                    <CModalFooter>\r\n                        <CButton color=\"danger\" onClick={() => this.handleDelete()}>OK</CButton>{' '}\r\n                        <CButton color=\"secondary\" onClick={() => this.showDeleteModal(false)}>Cancel</CButton>\r\n                    </CModalFooter>\r\n                </CModal>\r\n\r\n\r\n                <CRow>\r\n                    <CCol xs=\"12\" lg=\"12\">\r\n                        <CCard>\r\n                            <CCardHeader>\r\n                                 Table Material\r\n                            </CCardHeader>\r\n                            <CCardBody>\r\n                                <CDataTable\r\n                                    items={tableData}\r\n                                    fields={fields}\r\n                                    striped\r\n                                    itemsPerPage={5}\r\n                                    pagination\r\n                                    // columnFilter\r\n                                    hover\r\n                                    // footer\r\n                                    sorter\r\n                                    tableFilter\r\n                                    scopedSlots={{\r\n                                        'Type':\r\n                                            (item) => (\r\n                                                <td>\r\n                                                    <CBadge color={this.getBadge(item.Type)}>\r\n                                                        {item.Type}\r\n                                                    </CBadge>\r\n                                                </td>\r\n                                            ),\r\n                                        'Edit':\r\n                                            (item) => (\r\n                                                <td>\r\n                                                    <CButton type=\"submit\" size=\"sm\" color=\"warning\" onClick={() => this.handleEditClick(item)}> Edit</CButton>\r\n\r\n                                                </td>\r\n                                            ),\r\n\r\n                                        'Delete':\r\n                                            (item) => (\r\n                                                <td>\r\n                                                    <CButton type=\"submit\" size=\"sm\" color=\"danger\" onClick={() => this.handleDeleteClick(item)}> Delete</CButton>\r\n\r\n                                                </td>\r\n                                            )\r\n\r\n                                    }}\r\n\r\n                                />\r\n                            </CCardBody>\r\n                        </CCard>\r\n                    </CCol>\r\n                </CRow>\r\n\r\n            </>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Material;"],"sourceRoot":""}